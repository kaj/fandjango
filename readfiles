#!/usr/bin/env python
# -*- coding: utf-8 -*-
from django.core.management import setup_environ
import settings # Assumed to be in the same directory.
setup_environ(settings)

from libris.models import *
from xml.dom.minidom import parse
from minixpath import *

def faRefKey(elem):
    n = elem.getAttribute('no')
    return RefKey.objects.get_or_create(title='Den %s:e Fantomen' % (n),
                                        slug='fa%s' % (n))[0]


def read_data_file(filename):
    dom = parse(filename)
    year = getText(evaluate(dom, "/libris/info/year")[0]);
    for issueElement in evaluate(dom, "/libris/issue"):
        if issueElement.parentNode.tagName != 'libris':
            print "Found non-relevant issue in", issueElement.parentNode.tagName
            continue
        pages = issueElement.getAttribute("pages")
        if pages == '': pages = None
        issue = Issue(year=year, 
                      number=issueElement.getAttribute("nr"),
                      pages = pages)
        issue.save()
        ordno = 0;
        print "Found issue:", issue
        for item in issueElement.childNodes:
            ++ordno
            if item.nodeType != 1:
                continue
            if item.tagName == 'serie':
                #titleText = getText(item.getElementsByTagName("title")[0]);
                titleText = getText(evaluate(item, "/title")[0]);
                title = Title.objects.get_or_create(title=titleText)[0]
                episode = Episode(title=title)
                epElem = evaluate(item, "/episode")
                if epElem:
                    episode.episode=getText(epElem[0]);
                partElem = evaluate(item, "/part")
                if partElem:
                    episode.part_no = partElem[0].getAttribute("no");
                    episode.part_name = getText(partElem[0]);
                teaserElem = evaluate(item, "/teaser")
                if teaserElem:
                    episode.teaser = getText(teaserElem[0])
                episode.save() # get an id
                    
                keyElem = evaluate(item, "/ref/fa")
                if keyElem:
                    keys = [faRefKey(k) for k in keyElem]
                    print "Ref keys:", keys
                    episode.ref_keys = keys
                keyElem = evaluate(item, "/ref/key")
                if keyElem:
                    keys = [RefKey.objects.get_or_create(title=getText(k))[0] for k in keyElem]
                    print "Ref keys:", keys
                    episode.ref_keys.add(*keys)
                episode.save();
                Publication(issue=issue, episode=episode, ordno=ordno).save()
                prevFaElem = evaluate(item, "/prevpub[fa!='']")
                for e in prevFaElem:
                    fa = getText(evaluate(e, "/fa")[0])
                    y = getText(evaluate(e, "/year")[0])
                    i = Issue.objects.get_or_create(year=y, 
                                                    number=fa)[0]
                    Publication(episode=episode, issue=i).save()
                
                print "Serie", episode
            else:
                print 'Element', item.tagName
    dom.unlink()

if __name__ == "__main__":
    from sys import argv
    for f in argv[1:]:
        print 'Read data from', f
        read_data_file(f)
