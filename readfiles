#!/usr/bin/env python
# -*- coding: utf-8 -*-
from django.core.management import setup_environ
import settings # Assumed to be in the same directory.
setup_environ(settings)

from libris.models import *
from xml.dom.minidom import parse
from minixpath import *

def getBestPlac(elem):
    bestElem = evaluate(elem, '/best')
    if bestElem:
        return int(bestElem[0].getAttribute('plac'))
    else:
        return 0

def read_data_file(filename):
    dom = parse(filename)
    year = getText(evaluate(dom, "/libris/info/year")[0]);
    for issueElement in evaluate(dom, "/libris/issue"):
        coverElem = evaluate(issueElement, '/omslag')
        issue, issue_is_new = Issue.objects.get_or_create(
            year=year,
            number=issueElement.getAttribute("nr"),
            defaults={'pages': issueElement.getAttribute('pages') or None,
                      'price': issueElement.getAttribute('price') or None,
                      'cover_best': getBestPlac(coverElem[0]) if coverElem else 0})
        ordno = 0;
        print "Found issue:", issue
        for item in issueElement.childNodes:
            ordno = ordno + 1
            if item.nodeType != 1:
                continue
            if item.tagName == 'omslag':
                issue.cover_by = [Creator.objects.get_or_create(name=name)[0]
                                  for name, alias
                                  in [name_alias(who) for who
                                      in getByWho(*evaluate(item, '/by'))]]
                
            if item.tagName == 'serie':
                title, title_is_new = Title.objects.get_or_create(
                    title=getText(evaluate(item, "/title")[0]))
                if title_is_new:
                    print "FOUND NEW TITLE:", title
                episodename = getText(*evaluate(item, "/episode")[:1]) or ''
                episode = Episode(title=title, episode=episodename)
                partElem = evaluate(item, "/part")
                if partElem:
                    no = partElem[0].getAttribute("no");
                    if no:
                        episode.part_no = no
                    episode.part_name = getText(partElem[0]);
                teaserElem = evaluate(item, "/teaser")
                if teaserElem:
                    episode.teaser = getText(teaserElem[0])
                copyElem = evaluate(item, '/copyright')
                if copyElem:
                    episode.copyright = getText(copyElem[0])
                episode.save() # get an id
                
                stripElem = evaluate(item, '/daystrip')
                if stripElem:
                    fromdate = evaluate(stripElem[0], '/from')
                    todate = evaluate(stripElem[0], '/to')
                    if fromdate and todate:
                        episode.daystrip = DaystripRun.objects.create(
                            fromdate=getText(*fromdate),
                            todate=getText(*todate),
                            is_sundays=(stripElem[0].getAttribute('d') == 'sun'))
                    else:
                        print "Unknown kind of daystrip: %s" % stripElem
                episode.ref_keys = getRefKeys(item)

                for byElem in evaluate(item, "/by"):
                    role = byElem.getAttribute('role')
                    for who in getByWho(byElem):
                        CreativePart_create(episode, who, role)
                
                episode.save();
                Publication(issue=issue, episode=episode, ordno=ordno,
                            label=getText(*evaluate(item, "/label")) or '',
                            best_plac=getBestPlac(item)).save()
                prevFaElem = evaluate(item, "/prevpub[fa!='']")
                for e in prevFaElem:
                    fa = getText(evaluate(e, "/fa")[0])
                    y = getText(evaluate(e, "/year")[0])
                    i = Issue.objects.get_or_create(year=y, 
                                                    number=fa)[0]
                    Publication(episode=episode, issue=i).save()
                
                print "Serie", episode
            elif item.tagName == 'text':
                article = Article.objects.create(
                    title=getText(*evaluate(item, '/title')),
                    subtitle=getText(*evaluate(item, '/subtitle')))
                keys = getRefKeys(item)
                if keys:
                    article.ref_keys = keys
                    article.save();
                Publication(issue=issue, article=article, ordno=ordno).save()
                
            else:
                print 'Element', item.tagName
    dom.unlink()

def getByWho(byElem):
    whoElem = evaluate(byElem, "/who")
    if whoElem:
        return [getText(who) for who in whoElem]
    else:
        return [getText(byElem)]

def getRefKeys(item):
    ref = evaluate(item, "/ref")
    if ref:
        keys = \
            [ RefKey.FA(k.getAttribute('no'))
              for k in evaluate(ref[0], '/fa') ] + \
            [ RefKey.TITLE(getText(s))
              for s in evaluate(ref[0], '/serie')] + \
            [ RefKey.KEY(getText(k))
              for k in evaluate(ref[0], '/key') ]
        print "  keys:", keys
        return keys
    else:
        return []

if __name__ == "__main__":
    from sys import argv
    for f in argv[1:]:
        print 'Read data from', f
        read_data_file(f)
