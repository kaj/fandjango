#!/usr/bin/env python
# -*- coding: utf-8 -*-
from django.core.management import setup_environ
import settings # Assumed to be in the same directory.
setup_environ(settings)

from libris.models import *
from xml.dom.minidom import parse
from minixpath import *

def faRefKey(elem):
    n = elem.getAttribute('no')
    return RefKey.objects.get_or_create(title='Den %s:e Fantomen' % (n),
                                        slug='fa%s' % (n))[0]

def read_data_file(filename):
    dom = parse(filename)
    year = getText(evaluate(dom, "/libris/info/year")[0]);
    for issueElement in evaluate(dom, "/libris/issue"):
        try:
            issue = Issue.objects.get_or_create(year=year,
                                                number=issueElement.getAttribute("nr"))[0]
        except ValueError as err:
            print "Value error %s on issue %s of %s" % (err, issueElement.getAttribute("nr"), year)
            raise err
        issue.pages = issueElement.getAttribute("pages") or None
        issue.save()
        ordno = 0;
        print "Found issue:", issue
        for item in issueElement.childNodes:
            ordno = ordno + 1
            if item.nodeType != 1:
                continue
            if item.tagName == 'serie':
                title, title_is_new = Title.objects.get_or_create(
                    title=getText(evaluate(item, "/title")[0]))
                if title_is_new:
                    print "FOUND NEW TITLE: ", title
                episode = Episode(title=title)
                epElem = evaluate(item, "/episode")
                if epElem:
                    episode.episode=getText(epElem[0]);
                partElem = evaluate(item, "/part")
                if partElem:
                    no = partElem[0].getAttribute("no");
                    if no:
                        episode.part_no = no
                    episode.part_name = getText(partElem[0]);
                teaserElem = evaluate(item, "/teaser")
                if teaserElem:
                    episode.teaser = getText(teaserElem[0])
                episode.save() # get an id
                
                episode.ref_keys = getRefKeys(item)

                for byElem in evaluate(item, "/by"):
                    role = byElem.getAttribute('role')
                    whoElem = evaluate(byElem, "/who")
                    if whoElem:
                        for w in whoElem:
                            CreativePart_create(episode, getText(w), role).save()
                    else:
                        CreativePart_create(episode, getText(byElem), role).save()
                
                episode.save();
                Publication(issue=issue, episode=episode, ordno=ordno).save()
                prevFaElem = evaluate(item, "/prevpub[fa!='']")
                for e in prevFaElem:
                    fa = getText(evaluate(e, "/fa")[0])
                    y = getText(evaluate(e, "/year")[0])
                    i = Issue.objects.get_or_create(year=y, 
                                                    number=fa)[0]
                    Publication(episode=episode, issue=i).save()
                
                print "Serie", episode
            elif item.tagName == 'text':
                article = Article(title=getText(*evaluate(item, '/title')),
                                  subtitle=getText(*evaluate(item, '/subtitle')))
                article.save()
                article.ref_keys = getRefKeys(item)
                article.save()
                Publication(issue=issue, article=article, ordno=ordno).save()
                
            else:
                print 'Element', item.tagName
    dom.unlink()

def getRefKeys(item):
    ref = evaluate(item, "/ref")
    if ref:
        keys = [faRefKey(k) for k in evaluate(ref[0], "/fa")] + [RefKey.objects.get_or_create(title=getText(k))[0] for k in evaluate(ref[0], "/key")]
        print "  keys:", keys
        return keys
    else:
        return []

if __name__ == "__main__":
    from sys import argv
    for f in argv[1:]:
        print 'Read data from', f
        read_data_file(f)
